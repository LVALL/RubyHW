p 'Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
p 'arr1 = [23, 4, 12, 5, 85, 2, 14]'
arr1 = [23, 4, 12, 5, 85, 2, 14]
p arr1.select.with_index { |_, i| i.even? } + arr1.select.with_index { |_, i| i.odd? }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
p 'arr1 = [23, 4, 12, 5, 85, 2, 14]'
p arr1.select.with_index { |_, i| i.odd? } + arr1.select.with_index { |_, i| i.even? }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству:
A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
p 'arr2 = [4, 12, 5, 85, 2, 14]'
arr2 = [4, 12, 5, 85, 2, 14]
p arr2.index { |a| arr2[0] < a && a < arr2[-1] } || []
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству:
A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
p 'arr2 = [4, 12, 5, 85, 2, 14]'
p arr2.index(arr2.select { |a| arr2[0] < a && a < arr2[-1] }.last) || []
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент.
Первый и последний элементы массива не изменять.'
p 'arr3 = [12, 5, 8, 2, 19]'
arr3 = [12, 5, 8, 2, 19]
p arr3.each_with_index.map { |e, i| i.even? && i != 0 && i != arr3.length - 1 ? e + arr3[0] : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к четным числам последний элемент.
Первый и последний элементы массива не изменять.'
p 'arr3 = [12, 5, 8, 2, 19]'
p arr3.each_with_index.map { |e, i| i.even? && i != 0 && i != arr3.length - 1 ? e + arr3[-1] : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам последний элемент.
Первый и последний элементы массива не изменять.'
p 'arr3 = [12, 5, 8, 2, 19]'
p arr3.each_with_index.map { |e, i| i.odd? && i != 0 && i != arr3.length - 1 ? e + arr3[0] : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам первый элемент.
Первый и последний элементы массива не изменять.'
p 'arr3 = [12, 5, 8, 2, 19]'
p arr3.each_with_index.map { |e, i| i.odd? && i != 0 && i != arr3.length - 1 ? e + arr3[-1] : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все положительные элементы на значение минимального.'
p 'arr4 = [12, 5, 8, 2, 19]'
arr4 = [27, 55, -8, 2, -9]
p arr4.map { |e| e.positive? ? arr4.min : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все положительные элементы на значение максимального.'
p 'arr4 = [12, 5, 8, 2, 19]'
p arr4.map { |e| e.positive? ? arr4.max : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального.'
p 'arr4 = [12, 5, 8, 2, 19]'
p arr4.map { |e| e.negative? ? arr4.min : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального.'
p 'arr4 = [12, 5, 8, 2, 19]'
p arr4.map { |e| e.negative? ? arr4.max : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.'
p 'arr5 = [12, 5, 8, 2, 19]'
arr5 = [12, 5, 8, 2, 19]
p arr5.push(arr5.shift)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
p 'arr5 = [12, 5, 8, 2, 19]'
arr6 = [12, 5, 8, 2, 19]
p arr6.unshift(arr6.pop)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество его локальных максимумов.'
p 'arr7 = [1, 5, 4, 2, 8, 16, 10]'
arr7 = [1, 5, 4, 2, 8, 16, 10]
maxes = []
arr7.each_index do |i|
  if i != 0 && i != arr7.length - 1
    maxes.push(arr7[i]) if arr7[i - 1] < arr7[i] && arr7[i] > arr7[i + 1]
  end
end
p maxes.count
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество его локальных минимумов.'
p 'arr7 = [1, 5, 4, 2, 8, 16, 10]'
minimals = []
arr7.each_index do |i|
  if i != 0 && i != arr7.length - 1
    minimals.push(arr7[i]) if arr7[i - 1] > arr7[i] && arr7[i] < arr7[i + 1]
  end
end
p minimals.count
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти максимальный из его локальных максимумов.'
p 'arr7 = [1, 5, 4, 2, 8, 16, 10]'
p maxes.max
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти минимальный из его локальных минимумов.'
p 'arr7 = [1, 5, 4, 2, 8, 16, 10]'
p minimals.min
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, расположенных перед первым минимальным.'
p 'arr8 = [2, 3, 7, 1, 2]'
arr8 = [2, 3, 7, 1, 2]
before_min = arr8[0...(arr8.index(arr8.min))]
arr8.index(arr8.min) != 0 ? (p before_min.count) : (p 0)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, расположенных перед первым максимальным.'
p 'arr8 = [2, 3, 7, 1, 2]'
before_max = arr8[0...(arr8.index(arr8.max))]
arr8.index(arr8.min) != 0 ? (p before_max.count) : (p 0)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, расположенных после первого максимального.'
p 'arr8 = [2, 3, 7, 1, 2]'
after_max = arr8[(arr8.index(arr8.max))...arr8.length - 1]
arr8.index(arr8.min) != arr8.length - 1 ? (p after_max.count) : (p 0)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, расположенных после первого минимального.'
p 'arr8 = [2, 3, 7, 1, 2]'
after_min = arr8[(arr8.index(arr8.min))...arr8.length - 1]
arr8.index(arr8.min) != arr8.length - 1 ? (p after_min.count) : (p 0)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют
убывающую последовательность.'
p 'arr9 = [1, 2, 3, 5, 4]'
arr9 = [1, 2, 3, 5, 4]
p (0...arr9.size).sort_by { |i| arr9[i] }.reverse
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют
возрастающую последовательность.'
p 'arr9 = [1, 2, 3, 5, 4]'
p (0...arr9.size).sort_by { |i| arr9[i] }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Упорядочить его по убыванию.'
p 'arr10 = [1, 21, 3, 14, 4]'
arr10 = [1, 21, 3, 14, 4]
p arr10.sort.reverse
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Упорядочить его по возрастанию.'
p 'arr10 = [1, 21, 3, 14, 4]'
p arr10.sort
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент.'
p 'arr11 = [-1, 2, -3, 4, 8]'
arr11 = [-1, 2, -3, 4, 8]
positive_indexes = arr11.each_index.select { |i| arr11[i].positive? }
positive_indexes.each_with_index { |e, i| arr11.insert(e + i, arr11[0]) }
p arr11
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент.'
p 'arr12 = [-1, 2, -3, 4, 8]'
arr12 = [-1, 2, -3, 4, 8]
negative_indexes = arr12.each_index.select { |i| arr12[i].negative? }
negative_indexes.each_with_index { |e, i| arr12.insert(e + i, arr12[0]) }
p arr12
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, вставив после каждого положительного элемента нулевой элемент.'
p 'arr13 = [-1, 2, -3, 4, 8]'
arr13 = [-1, 2, -3, 4, 8]
positive_indexes_after = arr13.each_index.select { |i| arr13[i].positive? }
positive_indexes_after.each_with_index { |e, i| arr13.insert((e + 1) + i, arr13[0]) }
p arr13
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент.'
p 'arr14 = [-1, 2, -3, 4, 8]'
arr14 = [-1, 2, -3, 4, 8]
negative_indexes_after = arr14.each_index.select { |i| arr14[i].negative? }
negative_indexes_after.each_with_index { |e, i| arr14.insert((e + 1) + i, arr14[0]) }
p arr14
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, между первым и последним максимальным.'
p 'arr15 = [-1, 8, -3, 8, 8]'
arr15 = [-1, 8, -3, 8, 8]
between_maxes = arr15[arr15.index(arr15.max) + 1..arr15.rindex(arr15.max) - 1]
p between_maxes.count
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, между первым и последним минимальным.'
p 'arr16 = [-1, 8, 3, -1, 8]'
arr16 = [-1, 8, 3, -1, 8]
between_minis = arr16[arr16.index(arr16.min) + 1..arr16.rindex(arr16.min) - 1]
p between_minis.count
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Проверить, чередуются ли в нем четные и нечетные числа.'
p 'arr17 = [2, 3, 4, 5, 6]'
arr17 = [2, 3, 4, 5, 6]
p (1...arr17.size - 1).all? { |i| (arr17[i].odd? && arr17[i + 1].even?) || (arr17[i].even? && arr17[i + 1].odd?) }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Проверить, чередуются ли в нем положительные и отрицательные числа.'
p 'arr18 = [-2, 3, -4, 5, -6]'
arr18 = [-2, 3, -4, 5, -6]
p (1...arr18.size - 1).all? do |i|
  p (arr18[i].positive? && arr18[i + 1].negative?) || (arr18[i].negative? && arr18[i + 1].positive?)
end
p '-------------------------------------------------------------------------------------------------------------'

p 'Дано вещественное число R и массив вещественных чисел.
Найти элемент массива, который наиболее близок к данному числу.'
p 'arr19 = [1.47, 1.21, 1.46, 0.23, 4.44] r = 1.64'
arr19 = [1.21, 1.46, 1.47, 0.23, 4.44]
r = 1.64
differences = []
arr19.map { |e| differences << (e - r).abs }
p arr19[differences.index(differences.min)]
p '-------------------------------------------------------------------------------------------------------------'

p 'Дано вещественное число R и массив вещественных чисел.
Найти элемент массива, который наименее близок к данному числу.'
p 'arr19 = [1.47, 1.21, 1.46, 0.23, 4.44] r = 1.64'
p arr19[differences.index(differences.max)]
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести вначале все его четные элементы, а затем - нечетные.'
p 'arr20 = [47, 21, 6, 6, 6]'
arr21 = [7, 20, 5, 6, 6]
p arr21.select(&:even?) + arr21.select(&:odd?)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести вначале все его нечетные элементы, а затем - четные.'
p 'arr20 = [47, 21, 6, 6, 6]'
arr21 = [7, 20, 5, 6, 6]
p arr21.select(&:odd?) + arr21.select(&:even?)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Удалить все элементы, встречающиеся более двух раз.'
p 'arr22 = [2, 6, 5, 5, 5]'
arr22 = [2, 5, 5, 6, 5]
arr22.each { |e| arr22.delete(e) if arr22.count(e) > 2 }
p arr22
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти среднее арифметическое модулей его элементов.'
p 'arr23 = [22, 5, 55, 16, 5]'
arr23 = [22, 5, 55, 16, 5]
p arr23.inject(0) { |sum, number| sum + number.abs } / arr23.size
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти среднее арифметическое квадратов его элементов.'
p 'arr24 = [2, 59, 5, 6, 78]'
arr24 = [2, 59, 5, 6, 78]
p arr24.inject(0) { |sum, number| sum + number**2 } / arr24.size
p '-------------------------------------------------------------------------------------------------------------'

p 'Дано целое число. Найти сумму его цифр.'
p 'num = 1234'
num = 1234
p num.to_s.chars.map(&:to_i).inject(0) { |sum, number| sum + number }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти среднее арифметическое его элементов.'
p 'arr25 = [2, 9, 5, 6]'
arr25 = [2, 9, 5, 6]
p arr25.inject(0) { |sum, number| sum + number } / arr25.size
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти все четные элементы.'
p 'arr26 = [2, 8, 5, 6, 3]'
arr26 = [2, 8, 5, 6, 3]
p arr26.select(&:even?)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти все нечетные элементы.	'
p 'arr26 = [2, 8, 5, 6, 3]'
p arr26.select(&:odd?)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество четных элементов.'
p 'arr26 = [2, 8, 5, 6, 3]'
p arr26.select(&:even?).count
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество нечетных элементов.'
p 'arr26 = [2, 8, 5, 6, 3]'
p arr26.select(&:odd?).count
p '-------------------------------------------------------------------------------------------------------------'

p 'Дано число А и натуральное число N. Найти результат следующего выражения 1 + А + А*2 + А*3 + … + А*N.'
p 'a = 5 n = 8'
a = 5
n = 8
p (1..n).inject(1) { |sum, i| sum + a * i }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дано натуральное число N. Найти результат следующего произведения 1*2*…*N.'
p 'n = 5'
n = 5
p (1..n).inject(:*) || 1
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив и число К. Вывести количество элементов, меньших К.'
p 'arr26 = [2, 8, 5, 6, 3] k = 5'
arr28 = [2, 8, 5, 6, 3]
k = 5
p arr28.select { |e| e < k }.count
p '-------------------------------------------------------------------------------------------------------------'





