p 'Дан целочисленный массив. Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
p 'arr1 = [23, 4, 12, 5, 85, 2, 14]'
arr1 = [23, 4, 12, 5, 85, 2, 14]
output1 = ''
arr1.each_index { |i| output1 << "#{arr1[i]} " if i.even? }
arr1.each_index { |i| output1 << "#{arr1[i]} " if i.odd? }
p output1
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
p 'arr1 = [23, 4, 12, 5, 85, 2, 14]'
output2 = ''
arr1.each_index { |i| output2 << "#{arr1[i]} " if i.odd? }
arr1.each_index { |i| output2 << "#{arr1[i]} " if i.even? }
p output2
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести номер первого из тех его элементов, которые удовлетворяют двойному неравенству:
A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
p 'arr2 = [4, 12, 5, 85, 2, 14]'
arr2 = [4, 12, 5, 85, 2, 14]
output_arr1 = []
condition = arr2.detect { |el| el > arr2[0] && el < arr2[-1] }
output_arr1 << arr2.index(condition) unless condition.nil?
p output_arr1
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести номер последнего из тех его элементов, которые удовлетворяют двойному неравенству:
A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
p 'arr2 = [4, 12, 5, 85, 2, 14]'
output_arr2 = []
condition = arr2.find_all { |el| el > arr2[0] && el < arr2[-1] }
output_arr2 << arr2.index(condition[-1]) unless condition.nil?
p output_arr2
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент.
Первый и последний элементы массива не изменять.'
p 'arr3 = [12, 5, 8, 2, 19]'
arr3 = [12, 5, 8, 2, 19]
p arr3.each_with_index.map { |e, i| i.even? && i != 0 && i != arr3.length - 1 ? e + arr3[0] : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к четным числам последний элемент.
Первый и последний элементы массива не изменять.'
p 'arr3 = [12, 5, 8, 2, 19]'
p arr3.each_with_index.map { |e, i| i.even? && i != 0 && i != arr3.length - 1 ? e + arr3[-1] : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам последний элемент.
Первый и последний элементы массива не изменять.'
p 'arr3 = [12, 5, 8, 2, 19]'
p arr3.each_with_index.map { |e, i| i.odd? && i != 0 && i != arr3.length - 1 ? e + arr3[0] : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, прибавив к нечетным числам первый элемент.
Первый и последний элементы массива не изменять.'
p 'arr3 = [12, 5, 8, 2, 19]'
p arr3.each_with_index.map { |e, i| i.odd? && i != 0 && i != arr3.length - 1 ? e + arr3[-1] : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все положительные элементы на значение минимального.'
p 'arr4 = [12, 5, 8, 2, 19]'
arr4 = [27, 55, -8, 2, -9]
p arr4.map { |e| e.positive? ? arr4.min : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все положительные элементы на значение максимального.'
p 'arr4 = [12, 5, 8, 2, 19]'
p arr4.map { |e| e.positive? ? arr4.max : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все отрицательные элементы на значение минимального.'
p 'arr4 = [12, 5, 8, 2, 19]'
p arr4.map { |e| e.negative? ? arr4.min : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Заменить все отрицательные элементы на значение максимального.'
p 'arr4 = [12, 5, 8, 2, 19]'
p arr4.map { |e| e.negative? ? arr4.max : e }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Осуществить циклический сдвиг элементов массива влево на одну позицию.'
p 'arr5 = [12, 5, 8, 2, 19]'
arr5 = [12, 5, 8, 2, 19]
p arr5.push(arr5.shift)
p '-------------------------------------------------------------------------------------------------------------'


p 'Дан целочисленный массив. Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
p 'arr5 = [12, 5, 8, 2, 19]'
arr6 = [12, 5, 8, 2, 19]
p arr6.unshift(arr6.pop)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество его локальных максимумов.'
p 'arr7 = [1, 5, 4, 2, 8, 16, 10]'
arr7 = [1, 5, 4, 2, 8, 16, 10]
maxes = []
arr7.each_index do |i|
  if i != 0 && i != arr7.length - 1
    maxes.push(arr7[i]) if arr7[i - 1] < arr7[i] && arr7[i] > arr7[i + 1]
  end
end
p maxes.count
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество его локальных минимумов.'
p 'arr7 = [1, 5, 4, 2, 8, 16, 10]'
minimals = []
arr7.each_index do |i|
  if i != 0 && i != arr7.length - 1
    minimals.push(arr7[i]) if arr7[i - 1] > arr7[i] && arr7[i] < arr7[i + 1]
  end
end
p minimals.count
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти максимальный из его локальных максимумов.'
p 'arr7 = [1, 5, 4, 2, 8, 16, 10]'
p maxes.max
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти минимальный из его локальных минимумов.'
p 'arr7 = [1, 5, 4, 2, 8, 16, 10]'
p minimals.min
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, расположенных перед первым минимальным.'
p 'arr8 = [2, 3, 7, 1, 2]'
arr8 = [2, 3, 7, 1, 2]
before_min = arr8[0...(arr8.index(arr8.min))]
arr8.index(arr8.min) != 0 ? (p before_min.count) : (p 0)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, расположенных перед первым максимальным.'
p 'arr8 = [2, 3, 7, 1, 2]'
before_max = arr8[0...(arr8.index(arr8.max))]
arr8.index(arr8.min) != 0 ? (p before_max.count) : (p 0)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, расположенных после первого максимального.'
p 'arr8 = [2, 3, 7, 1, 2]'
after_max = arr8[(arr8.index(arr8.max))...arr8.length - 1]
arr8.index(arr8.min) != arr8.length - 1 ? (p after_max.count) : (p 0)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Найти количество элементов, расположенных после первого минимального.'
p 'arr8 = [2, 3, 7, 1, 2]'
after_min = arr8[(arr8.index(arr8.min))...arr8.length - 1]
arr8.index(arr8.min) != arr8.length - 1 ? (p after_min.count) : (p 0)
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют
убывающую последовательность.'
p 'arr9 = [1, 2, 3, 5, 4]'
arr9 = [1, 2, 3, 5, 4]
p (0...arr9.size).sort_by { |i| arr9[i] }.reverse
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Вывести индексы массива в том порядке, в котором соответствующие им элементы образуют
возрастающую последовательность.'
p 'arr9 = [1, 2, 3, 5, 4]'
p (0...arr9.size).sort_by { |i| arr9[i] }
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Упорядочить его по убыванию.'
p 'arr10 = [1, 21, 3, 14, 4]'
arr10 = [1, 21, 3, 14, 4]
p arr10.sort.reverse
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Упорядочить его по возрастанию.'
p 'arr10 = [1, 21, 3, 14, 4]'
p arr10.sort
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, вставив перед каждым положительным элементом нулевой элемент.'
arr11 = [-1, 2, -3, 4, 8]
positive_indexes = arr11.each_index.select { |i| arr11[i].positive? }
positive_indexes.each_with_index { |e, i| arr11.insert(e + i, arr11[0]) }
p arr11
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, вставив перед каждым отрицательным элементом нулевой элемент.'
arr12 = [-1, 2, -3, 4, 8]
negative_indexes = arr12.each_index.select { |i| arr12[i].negative? }
negative_indexes.each_with_index { |e, i| arr12.insert(e + i, arr12[0]) }
p arr12
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, вставив после каждого положительного элемента нулевой элемент.'
arr13 = [-1, 2, -3, 4, 8]
positive_indexes_after = arr13.each_index.select { |i| arr13[i].positive? }
positive_indexes_after.each_with_index { |e, i| arr13.insert((e + 1) + i, arr13[0]) }
p arr13
p '-------------------------------------------------------------------------------------------------------------'

p 'Дан целочисленный массив. Преобразовать его, вставив после каждого отрицательного элемента нулевой элемент.	'
arr14 = [-1, 2, -3, 4, 8]
negative_indexes_after = arr14.each_index.select { |i| arr14[i].negative? }
negative_indexes_after.each_with_index { |e, i| arr14.insert((e + 1) + i, arr14[0]) }
p arr14
p '-------------------------------------------------------------------------------------------------------------'
